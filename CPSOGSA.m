%CPSOGSA source code v2.0, Generated by Sajad Ahmad Rather and P. Shanthi Bala, 2019.

% Citation: 
% Rather, S. A., & Bala, P. S. (2019). Hybridization of constriction coefficient based particle swarm optimization and gravitational search algorithm for function optimization. Available at SSRN 3576489.

%Department of Computer Science and Engineering
%School of Engineering and Technology
%Pondicherry University, India.



function [gBestScore,gBest,GlobalBestCost,AverageCost,StandardDCost]=CPSOGSA(n,iteration,low,up,dim,fobj)

% [low,up,dim]=benchmark_functions_details(Benchmark_Function_ID);%define the boundary and dimension of the benchmark function
                                %%%%
% % Constriction Coefficients
phi1=2.05;
phi2=2.05;
phi=phi1+phi2;
chi=2/(phi-2+sqrt(phi^2-4*phi));
w=chi;          % Inertia Weight
wdamp=1;        % Inertia Weight Damping Ratio
C1=chi*phi1;    % Personal Learning Coefficient
C2=chi*phi2;    % Global Learning Coefficient

                                %%%%
current_fitness =zeros(n,1);
gBest=zeros(1,dim);
gBestScore=inf;
% w=1;
% wdamp=0.99;
VelMax=0.1*(up-low);
VelMin=-up;

for i=1:n
        pBestScore(i)=inf;
end
        pBest=zeros(n,dim);

G0=1;                                          % gravitational constant
current_position = rand(n,dim).*(up-low)+low;  %initial positions in the problem's boundary
velocity = .3*randn(n,dim) ;
acceleration=zeros(n,dim);
mass(n)=0;
force=zeros(n,dim);

%C1=0.5; %C1 in Equation (9)
% C2=1.5; %C2 in Equation (9)

%%main loop
iter = 0 ;                  % Iterations’ counter
while  ( iter < iteration )

G=G0*exp(-23*iter/iteration); %Equation (4)
iter = iter + 1;
iter;
force=zeros(n,dim);
mass(n)=0;
acceleration=zeros(n,dim);

for i = 1:n
    fitness=0;
    %///Bound the search Space///
    Tp=current_position(i,:)>up;Tm=current_position(i,:)<low;current_position(i,:)=(current_position(i,:).*(~(Tp+Tm)))+up.*Tp+low.*Tm;                     
    %////////////////////////////
    
                                 %-------------------------------------------%
                                 %         Evaluate the population           %           
                                 %-------------------------------------------%      
    fitness=fobj(current_position(i,:));
    current_fitness(i)=fitness;    
        
    if(pBestScore(i)>fitness)
        pBestScore(i)=fitness;
        pBest(i,:)=current_fitness(i,:);
    end
    if(gBestScore>fitness)
        gBestScore=fitness;
        gBest=current_position(i,:);
    end
    
end

best=min(current_fitness);
AVE=mean(current_fitness);
STD=std(current_fitness);
worst=max(current_fitness);

        GlobalBestCost(iter)=gBestScore;
        GlobalBestCost(iter);
        best;
        
        AverageCost(iter)=gBestScore;
        AverageCost(iter);
        AVE;
        
        StandardDCost(iter)=gBestScore;
        StandardDCost(iter);
        STD;
        

    for pp=1:n
        if current_fitness(pp)==best
            break;
        end
        
    end
    
    bestIndex=pp;
            
    for pp=1:dim
        best_fit_position(iter,1)=best;
        best_fit_position(iter,pp+1)=current_position(bestIndex,pp);   
    end


                                               %-------------------%
                                               %   Calculate Mass  %
                                               %-------------------%
    for i=1:n
    mass(i)=(current_fitness(i)-0.99*worst)/(best-worst);    
end

for i=1:n
    mass(i)=mass(i)*5/sum(mass);    
    
end

                                               %-------------------%
                                               %  Force    update  %
                                               %-------------------%

for i=1:n
    for j=1:dim
        for k=1:n
            if(current_position(k,j)~=current_position(i,j))
                % Equation (3)
                force(i,j)=force(i,j)+ rand()*G*mass(k)*mass(i)*(current_position(k,j)-current_position(i,j))/abs(current_position(k,j)-current_position(i,j));
                
            end
        end
    end
end
                                               %------------------------------------%
                                               %  Accelations $ Velocities  UPDATE  %
                                               %------------------------------------%

for i=1:n
       for j=1:dim
            if(mass(i)~=0)
                %Equation (6)
                acceleration(i,j)=force(i,j)/mass(i);
            end
       end
end   

for i=1:n
        for j=1:dim
            %Equation(9)
            velocity(i,j)=w*rand()*velocity(i,j)+C1*rand()*acceleration(i,j) + C2*rand()*(gBest(j)-current_position(i,j));
         % Apply Velocity Limits
        velocity(i,j) = max(velocity(i,j),VelMin);
        velocity(i,j) = min(velocity(i,j),VelMax);
        end

      
end
                                               %--------------------------%
                                               %   positions   UPDATE     %
                                               %--------------------------%
                                                        
% %Equation (10) 
current_position = current_position + velocity ;


end
% w=w*wdamp;
end


